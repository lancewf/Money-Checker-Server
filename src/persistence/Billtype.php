<?php

require_once 'persistence/om/BaseBilltype.php';


/**
 * Skeleton subclass for representing a row from the 'billtype' table.
 *
 * user's itinerary
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Mar  8 23:25:10 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    persistence
 */
class Billtype extends BaseBilltype {
	// -------------------------------------------------------------------------
	// Public Members
	// -------------------------------------------------------------------------
	
	public function toJson()
	{
		$array_store = array ();

		$array_store["key"] = $this->getKey();
		$array_store["name"] = $this->getName();
		$array_store["description"] = (string)$this->getDescription();

		return json_encode($array_store);
	}

	public function getCurrentAllotted()
	{
		$timestamp = time();
		$month = (int)date("n", $timestamp);
		$year = (int)date("Y", $timestamp);
		
		foreach($this->getAllotteds() as $allotted)
		{
			if($this->IsInBetween($month, $year, $allotted))
			{
				return $allotted;
			}
		}
		 
		return NULL;
	}
	
	public function getAllottedPurchases($allotted)
	{
		$startTime = mktime(0, 0, 0, $allotted->getStartMonth(), 
			$allotted->getStartDayOfMonth(), $allotted->getStartYear());

		$endOfTime = mktime(23, 59, 59, $allotted->getEndMonth(), 
			$allotted->getEndDayOfMonth(), $allotted->getEndYear());
		
		$c = new Criteria();
		$c->add(PurchasePeer::DATE, $startTime,
			Criteria::GREATER_EQUAL);
		$c->addAnd(PurchasePeer::DATE, $endOfTime,
			Criteria::LESS_EQUAL);
			
		$purchases = $this->getPurchases($c);
		
		return $purchases;
	}
	
	public function getCurrentAllottedPurchases()
	{
		$currentAllotted = $this->getCurrentAllotted();
		
		return $this->getAllottedPurchases($currentAllotted);
	}

	// -------------------------------------------------------------------------
	// Private Members
	// -------------------------------------------------------------------------
	
	private function IsInBetween($month, $year, $allotted)
	{
		$startDate = $allotted->getStartMonth() + $allotted->getStartYear() * 12;
		$endDate = $allotted->getEndMonth() + $allotted->getEndYear() * 12;
		$comparingDate = $month + $year * 12;

		if ($comparingDate >= $startDate && $comparingDate <= $endDate)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
} // Billtype
